{"version":3,"sources":["components/Note.js","components/Notification.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","Notification","message","defaultProps","axios","get","then","resp","data","newObject","post","id","put","Footer","style","color","fontStyle","fontSize","App","props","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","allNotes","notesToShow","filter","map","key","console","log","find","n","changedNote","changedNoteFromServer","catch","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","createdNote","concat","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"iNAYeA,EAVF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACZC,EAAQF,EAAKG,UAAY,qBAAuB,iBACtD,OACI,wBAAIC,UAAU,QACTJ,EAAKK,QACN,4BAAQC,QAASL,GAAmBC,KCJ1CK,EAAe,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAEpB,OAAgB,OAAZA,EAAyB,KAGzB,yBAAKJ,UAAU,SACVI,IASbD,EAAaE,aAAe,CACxBD,QAAS,MAGED,Q,gBCCA,EAlBA,WACX,OAAOG,IACFC,IAJO,cAKPC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,SAeZ,EAZA,SAAAC,GACX,OAAOL,IACFM,KAVO,aAUOD,GACdH,MAAK,SAAAC,GAAI,OAAIA,EAAKC,SASZ,EANA,SAACG,EAAIF,GAChB,OAAOL,IACFQ,IADE,UAfK,aAeL,YACgBD,GAAMF,GACxBH,MAAK,SAAAC,GAAI,OAAIA,EAAKC,SCdrBK,EAAS,WAOX,OACI,yBAAKC,MAPW,CAChBC,MAAO,QACPC,UAAW,SACXC,SAAU,KAKN,6BACA,uGAmGGC,EA9FH,SAACC,GAAW,IAAD,EACOC,mBAAS,IADhB,mBACZC,EADY,KACLC,EADK,OAEWF,mBAAS,IAFpB,mBAEZG,EAFY,KAEHC,EAFG,OAGWJ,oBAAS,GAHpB,mBAGZK,EAHY,KAGHC,EAHG,OAIqBN,mBAAS,MAJ9B,mBAIZO,EAJY,KAIEC,EAJF,KAMnBC,qBAAU,WACNC,IAEKxB,MAAK,SAACyB,GACHT,EAASS,QAElB,IAEH,IAsBMC,EAAcP,EACdJ,EACAA,EAAMY,QAAO,SAAAvC,GAAI,OAAIA,EAAKG,aA8BhC,OACI,6BACI,qCAEA,kBAAC,EAAD,CAAcK,QAASyB,IAEvB,6BACI,4BAAQ3B,QAAS,kBAAM0B,GAAYD,KAAnC,QACUA,EAAU,YAAc,QAGtC,4BAvCWO,EAAYE,KAAI,SAAAxC,GAAI,OACnC,kBAAC,EAAD,CACIyC,IAAKzC,EAAKiB,GACVjB,KAAMA,EACNC,iBAAkB,kBA9BC,SAAAgB,GACvByB,QAAQC,IAAI,iBAAkB1B,EAAI,wBAClC,IAAMjB,EAAO2B,EAAMiB,MAAK,SAAAC,GAAC,OAAIA,EAAE5B,KAAOA,KAChC6B,EAAW,eAAQ9C,EAAR,CAAcG,WAAYH,EAAKG,YAEhDiC,EACYnB,EAAI6B,GACXlC,MAAK,SAAAmC,GACFnB,EAASD,EACJa,KAAI,SAAAxC,GAAI,OAAIA,EAAKiB,KAAOA,EAAKjB,EAAO+C,SAG5CC,OAAM,WACHd,EAAgB,SAAD,OAAUY,EAAYzC,QAAtB,kCACf4C,YAAW,WACPf,EAAgB,QACjB,KACHN,EAASD,EAAMY,QAAO,SAAAvC,GAAI,OAAIA,EAAKiB,KAAOA,SAatBiC,CAAmBlD,EAAKiB,WAsChD,0BAAMkC,SA7BE,SAACC,GACbA,EAAMC,iBACN,IAAMC,EAAa,CACfjD,QAASwB,EACT0B,MAAM,IAAIC,MAAOC,cACjBtD,UAAWuD,KAAKC,SAAW,IAE/BvB,EACYkB,GACP1C,MAAK,SAAAgD,GACFhC,EAASD,EAAMkC,OAAOD,IACtB9B,EAAW,SAmBX,2BACIgC,MAAOjC,EACPkC,SArCS,SAACX,GACtBV,QAAQC,IAAIS,EAAMY,OAAOF,OACzBhC,EAAWsB,EAAMY,OAAOF,UAqChB,4BAAQG,KAAK,UAAb,SAEJ,kBAAC,EAAD,Q,MCxGZC,IAASC,OACL,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.2ee2a4b9.chunk.js","sourcesContent":["import React from 'react'\n\nconst Note = ({ note, toggleImportance }) => {\n    const label = note.important ? 'make not important' : 'make important';\n    return (\n        <li className='note'>\n            {note.content}\n            <button onClick={toggleImportance}>{label}</button>\n        </li>\n    )\n}\n\nexport default Note\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Notification = ({ message }) => {\n\n    if (message === null) return null;\n    // else\n    return (\n        <div className='error'>\n            {message}\n        </div>\n    );\n};\n\nNotification.propTypes = {\n    message: PropTypes.string,\n};\n\nNotification.defaultProps = {\n    message: null,\n}\n\nexport default Notification;\n","import axios from 'axios'\n// const baseUrl = 'http://localhost:3001/api/notes'\n// const baseUrl = 'https://ancient-ocean-58745.herokuapp.com/notes'\nconst baseUrl = '/api/notes'\n\nconst getAll = () => {\n    return axios\n        .get(baseUrl)\n        .then(resp => resp.data)\n}\n\nconst create = newObject => {\n    return axios\n        .post(baseUrl, newObject)\n        .then(resp => resp.data)\n}\n\nconst update = (id, newObject) => {\n    return axios\n        .put(`${baseUrl}/${id}`, newObject)\n        .then(resp => resp.data)\n}\n\nexport default {\n    getAll,\n    create,\n    update\n}\n","import React, { useEffect, useState } from 'react'\n\nimport Note from './components/Note'\nimport Notification from './components/Notification'\nimport noteService from './services/notes';\n\nconst Footer = () => {\n    const footerStyle = {\n        color: 'green',\n        fontStyle: 'italic',\n        fontSize: 16\n    }\n\n    return (\n        <div style={footerStyle}>\n            <br />\n            <em>Note app, Department of Computer Science, University of Helsinki 2019</em>\n        </div>\n    )\n}\n\nconst App = (props) => {\n    const [notes, setNotes] = useState([])\n    const [newNote, setNewNote] = useState('')\n    const [showAll, setShowAll] = useState(true)\n    const [errorMessage, setErrorMessage] = useState(null)\n\n    useEffect(() => {\n        noteService\n            .getAll()\n            .then((allNotes) => {\n                setNotes(allNotes);\n            });\n    }, []) // <-- '[]' so effect is run only after 1st render\n\n    const toggleImportanceOf = id => {\n        console.log('importance of ', id, ' needs to be toggled');\n        const note = notes.find(n => n.id === id)\n        const changedNote = { ...note, important: !note.important }\n\n        noteService\n            .update(id, changedNote)\n            .then(changedNoteFromServer => {\n                setNotes(notes\n                    .map(note => note.id !== id ? note : changedNoteFromServer)\n                )\n            })\n            .catch(() => {\n                setErrorMessage(`Note '${changedNote.content}' already deleted from server`);\n                setTimeout(() => {\n                    setErrorMessage(null);\n                }, 5000);\n                setNotes(notes.filter(note => note.id !== id)); // remove note with id = id\n            })\n\n    }\n\n    const notesToShow = showAll\n        ? notes\n        : notes.filter(note => note.important) // only show important ones\n\n    const rows = () => notesToShow.map(note =>\n        <Note\n            key={note.id}\n            note={note}\n            toggleImportance={() => toggleImportanceOf(note.id)}\n        />\n    )\n\n    const handleNoteChange = (event) => {\n        console.log(event.target.value)\n        setNewNote(event.target.value)\n    }\n\n    const addNote = (event) => {\n        event.preventDefault()\n        const noteObject = {\n            content: newNote,\n            date: new Date().toISOString(),\n            important: Math.random() > 0.5,\n        }\n        noteService\n            .create(noteObject)\n            .then(createdNote => {\n                setNotes(notes.concat(createdNote))\n                setNewNote('')\n            });\n    }\n\n    return (\n        <div>\n            <h1>Notes</h1>\n\n            <Notification message={errorMessage} />\n\n            <div>\n                <button onClick={() => setShowAll(!showAll)}>\n                    show {showAll ? 'important' : 'all' }\n                </button>\n            </div>\n            <ul>\n                {rows()}\n            </ul>\n            <form onSubmit={addNote}>\n                <input\n                    value={newNote}\n                    onChange={handleNoteChange}\n                />\n                <button type=\"submit\">save</button>\n            </form>\n            <Footer />\n        </div>\n    )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nimport './index.css';\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n)\n"],"sourceRoot":""}